[{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"Load required packages","title":"Using simphony's various options","text":"","code":"library('data.table') library('ggplot2') library('simphony')"},{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"evenly-spaced-timepoints","dir":"Articles","previous_headings":"","what":"Evenly-spaced timepoints","title":"Using simphony's various options","text":"","code":"featureGroups = data.table(amp = c(0, 3, 6), phase = c(0, 0, 6),                            rhyFunc = c(cos, cos, sin), fracFeatures = c(0.1, 0.8, 0.1))  simData = simphony(featureGroups)  mergedData = mergeSimData(simData) expectedTrend = getExpectedAbund(simData$featureMetadata, times = seq(0, 48, 0.25)) plotFeatures = c('feature_01', 'feature_05', 'feature_10')  ggplot() +   facet_wrap(~ feature) +   geom_line(data = expectedTrend[feature %in% plotFeatures], aes(x = time, y = mu)) +   geom_point(data = mergedData[feature %in% plotFeatures], aes(x = time, y = abund)) +   scale_x_continuous(breaks = seq(0, 48, 8)) +   labs(x = 'Time (h)', y = 'Abundance') ggplot() +   geom_point(data = simData$featureMetadata, aes(x = factor(amp0), y = factor(feature))) +   labs(x = 'Amplitude', y = 'Feature')"},{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"custom-rhythm-function","dir":"Articles","previous_headings":"","what":"Custom rhythm function","title":"Using simphony's various options","text":"","code":"featureGroups = data.table(amp = 6, phase = -3, rhyFunc = function(x) sign(sin(x)))  simData = simphony(featureGroups)  mergedData = mergeSimData(simData) expectedTrend = getExpectedAbund(simData$featureMetadata, times = seq(0, 48, 0.1))  ggplot() +   geom_line(data = expectedTrend[feature %in% plotFeatures], aes(x = time, y = mu)) +   geom_point(data = mergedData[feature %in% plotFeatures], aes(x = time, y = abund)) +   scale_x_continuous(breaks = seq(0, 48, 8)) +   labs(x = 'Time (h)', y = 'Abundance')"},{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"specified-timepoints","dir":"Articles","previous_headings":"","what":"Specified timepoints","title":"Using simphony's various options","text":"","code":"featureGroups = data.table(amp = c(0, 3))  simData = simphony(featureGroups, timepointsType = 'specified', nFeatures = nrow(featureGroups),                    timepoints = c(seq(0, 22, 2), seq(24, 42, 6)))  mergedData = mergeSimData(simData) expectedTrend = getExpectedAbund(simData$featureMetadata, times = seq(0, 48, 0.25))  ggplot() +   facet_wrap(~ feature) +   geom_line(data = expectedTrend, aes(x = time, y = mu)) +   geom_point(data = mergedData, aes(x = time, y = abund)) +   scale_x_continuous(breaks = seq(0, 48, 8)) +   labs(x = 'Time (h)', y = 'Abundance')"},{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"random-timepoints","dir":"Articles","previous_headings":"","what":"Random timepoints","title":"Using simphony's various options","text":"","code":"featureGroups = data.table(amp = c(0, 3))  simData = simphony(featureGroups, timepointsType = 'random', nFeatures = nrow(featureGroups),                    timeRange = c(0, 24), nSamplesPerCond = 20)  mergedData = mergeSimData(simData) expectedTrend = getExpectedAbund(simData$featureMetadata, times = seq(0, 24, 0.25))  ggplot() +   facet_wrap(~ feature) +   geom_line(data = expectedTrend, aes(x = time, y = mu)) +   geom_point(data = mergedData, aes(x = time, y = abund)) +   scale_x_continuous(breaks = seq(0, 24, 4)) +   labs(x = 'Time (h)', y = 'Abundance')"},{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"time-dependent-amplitude-and-base","dir":"Articles","previous_headings":"","what":"Time-dependent amplitude and base","title":"Using simphony's various options","text":"","code":"featureGroups = data.table(amp =  c(function(tt) 3, function(tt) 3 * 2 ^ (-tt / 24)),                            base = c(function(tt) tt / 12, function(tt) 0))  simData = simphony(featureGroups, nFeatures = nrow(featureGroups))  mergedData = mergeSimData(simData) expectedTrend = getExpectedAbund(simData$featureMetadata, times = seq(0, 48, 0.25))  ggplot() +   facet_wrap(~ feature) +   geom_line(data = expectedTrend, aes(x = time, y = mu)) +   geom_point(data = mergedData, aes(x = time, y = abund)) +   scale_x_continuous(breaks = seq(0, 48, 8)) +   labs(x = 'Time (h)', y = 'Abundance')"},{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"differential-rhythmicity-between-conditions","dir":"Articles","previous_headings":"","what":"Differential rhythmicity between conditions","title":"Using simphony's various options","text":"","code":"featureGroupsList = list(   data.table(amp = c(1, 2, 2), phase = c(0, -3, 0), period = c(24, 24, 22)),   data.table(amp = c(3, 2, 2), phase = c(0,  3, 0), period = c(24, 24, 26)))  simData = simphony(featureGroupsList, nFeatures = nrow(featureGroupsList[[1]]))  mergedData = mergeSimData(simData) expectedTrend = getExpectedAbund(simData$featureMetadata, times = seq(0, 48, 0.25))  ggplot() +   facet_grid(cond ~ feature) +   geom_line(data = expectedTrend, aes(x = time, y = mu)) +   geom_point(data = mergedData, aes(x = time, y = abund), size = 0.5) +   scale_x_continuous(breaks = seq(0, 48, 8)) +   labs(x = 'Time (h)', y = 'Abundance')"},{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"controlling-negative-binomial-dispersion-and-base","dir":"Articles","previous_headings":"","what":"Controlling negative binomial dispersion and base","title":"Using simphony's various options","text":"","code":"featureGroups = data.table(amp = 3, base = c(4, 6, 8)) dispFunc = function(x) 3 * defaultDispFunc(x)  simData = simphony(featureGroups, interval = 4, nFeatures = nrow(featureGroups),                    family = 'negbinom', dispFunc = dispFunc)  mergedData = mergeSimData(simData) expectedTrend = getExpectedAbund(simData$featureMetadata, times = seq(0, 48, 0.25))  ggplot(expectedTrend) +   facet_wrap(. ~ factor(base0)) +   geom_line(data = expectedTrend, aes(x = time, y = mu)) +   geom_point(data = mergedData, aes(x = time, y = log2(abund + 1))) +   scale_x_continuous(breaks = seq(0, 48, 8)) +   labs(x = 'Time (h)', y = expression(log[2] * '(abundance + 1)'))"},{"path":"https://simphony.hugheylab.org/articles/examples.html","id":"poisson-sampling-at-high-resolution","dir":"Articles","previous_headings":"","what":"Poisson sampling at high resolution","title":"Using simphony's various options","text":"","code":"featureGroups = data.table(amp = 1, base = 0,                            rhyFunc = function(x) ifelse(x %% (2 * pi) < pi, 0.5, 4))  simData = simphony(featureGroups, timeRange = c(0, 24 * 4), interval = 0.1,                    nReps = 1, nFeatures = 1, family = 'poisson')  mergedData = mergeSimData(simData) expectedTrend = getExpectedAbund(simData$featureMetadata,                                  sampleMetadata = simData$sampleMetadata)  ggplot() +   geom_line(data = expectedTrend, aes(x = time, y = mu)) +   geom_point(data = mergedData, aes(x = time, y = abund), shape = 21, size = 1) +   scale_x_continuous(breaks = seq(0, 24 * 4, 12)) +   labs(x = 'Time (h)', y = 'Abundance')"},{"path":"https://simphony.hugheylab.org/articles/introduction.html","id":"load-the-packages-well-use","dir":"Articles","previous_headings":"","what":"Load the packages we’ll use","title":"Using simphony to evaluate rhythm detection","text":"Internally, simphony uses data.table package, provides enhanced version standard R data.frame. ’ll use data.table example well.","code":"library('data.table') library('ggplot2') library('kableExtra') library('knitr') library('limma') library('precrec') library('simphony')"},{"path":"https://simphony.hugheylab.org/articles/introduction.html","id":"simulate-the-data","dir":"Articles","previous_headings":"","what":"Simulate the data","title":"Using simphony to evaluate rhythm detection","text":"create data.table called featureGroups specifies desired properties simulated genes. want 75% simulated genes non-rhythmic 25% rhythm amplitude 1.1. Properties specified featureGroups given default values. simulated experiment 200 genes. Expression values sampled negative binomial family, models read counts next-generation sequencing data. interval time points 2 (default period 24), one replicate per time point. also use default time range simulated data points 0 48 hours. output simphony three components: abundData, sampleMetadata, featureMetadata. abundData matrix contains simulated expression values. row corresponds gene, column corresponds sample. Since sampled negative binomial family, expression values integers. sampleMetadata data.table contains condition (cond) time sample. simulated one condition, cond 1 samples. featureMetadata data.table contains properties simulated gene condition. group column corresponds row featureGroups gene belongs.","code":"set.seed(44) featureGroups = data.table(fracFeatures = c(0.75, 0.25), amp = c(0, 0.3)) simData = simphony(featureGroups, nFeatures = 200, interval = 2, nReps = 1, family = 'negbinom') kable(simData$abundData[1:3, 1:3]) kable(simData$sampleMetadata[1:3]) kable(simData$featureMetadata[149:151, !'dispFunc']) %>%   kable_styling(font_size = 12)"},{"path":"https://simphony.hugheylab.org/articles/introduction.html","id":"plot-the-simulated-time-course-for-selected-genes","dir":"Articles","previous_headings":"","what":"Plot the simulated time-course for selected genes","title":"Using simphony to evaluate rhythm detection","text":"plot simulated time-course non-rhythmic gene rhythmic gene. use mergeSimData function merge expression values, sample metadata, gene metadata. also want compare simulated expression values underlying distributions time, can use getExpectedAbund function. Since sampled negative binomial family, resulting mu column corresponds expected log2 counts. comes together ggplot.","code":"fmExample = simData$featureMetadata[feature %in% c('feature_150', 'feature_151')] dExample = mergeSimData(simData, fmExample$feature) dExpect = getExpectedAbund(fmExample, 24, times = seq(0, 48, 0.25)) dExample[, featureLabel := paste(feature, ifelse(amp0 == 0, '(non-rhythmic)', '(rhythmic)'))] dExpect[, featureLabel := paste(feature, ifelse(amp0 == 0, '(non-rhythmic)', '(rhythmic)'))]  ggplot(dExample) +   facet_wrap(~ featureLabel, nrow = 1) +   geom_line(aes(x = time, y = log2(2^mu + 1)), size = 0.25, data = dExpect) +   geom_point(aes(x = time, y = log2(abund + 1)), shape = 21, size = 2.5) +   labs(x = 'Time (h)', y = expression(log[2](counts + 1))) +   scale_x_continuous(limits = c(0, 48), breaks = seq(0, 48, 8))"},{"path":"https://simphony.hugheylab.org/articles/introduction.html","id":"detect-rhythmic-genes","dir":"Articles","previous_headings":"","what":"Detect rhythmic genes","title":"Using simphony to evaluate rhythm detection","text":"can use limma package detect rhythmic genes based linear model corresponds cosinor regression. follow typical limma workflow: fit linear model gene, run empirical Bayes, extract relevant summary statistics. pass lmFit log2 transformed counts.","code":"sampleMetadata = copy(simData$sampleMetadata) sampleMetadata[, timeCos := cos(time * 2 * pi / 24)] sampleMetadata[, timeSin := sin(time * 2 * pi / 24)] design = model.matrix(~ timeCos + timeSin, data = sampleMetadata) fit = lmFit(log2(simData$abundData + 1), design) fit = eBayes(fit, trend = TRUE) rhyLimma = topTable(fit, coef = 2:3, number = Inf)"},{"path":"https://simphony.hugheylab.org/articles/introduction.html","id":"evaluate-accuracy-of-rhythmic-gene-detection","dir":"Articles","previous_headings":"","what":"Evaluate accuracy of rhythmic gene detection","title":"Using simphony to evaluate rhythm detection","text":"First merge results limma known amplitudes featureMetadata. can plot distributions p-values rhythmicity non-rhythmic rhythmic genes. P-values non-rhythmic genes uniformly distributed 0 1, null hypothesis. P-values rhythmic genes, hand, tend closer 0.  Finally, can summarize ability distinguish non-rhythmic rhythmic genes using receiver operating characteristic (ROC) curve (use precrec package).","code":"rhyLimma$feature = rownames(rhyLimma) rhyLimma = merge(data.table(rhyLimma), simData$featureMetadata[, .(feature, amp0)], by = 'feature') ggplot(rhyLimma) +   geom_jitter(aes(x = factor(amp0), y = P.Value), shape = 21, width = 0.2) +   labs(x = expression('Rhythm amplitude ' * (log[2] ~ counts)), y = 'P-value of rhythmicity') rocprc = evalmod(scores = -log(rhyLimma$P.Value), labels = rhyLimma$amp0 > 0) autoplot(rocprc, 'ROC')"},{"path":"https://simphony.hugheylab.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Hughey. Author, maintainer. Jordan Singer. Author. Darwin Fu. Contributor.","code":""},{"path":"https://simphony.hugheylab.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hughey J, Singer J (2022). simphony: Simulating Large-Scale, Rhythmic Data. https://simphony.hugheylab.org, https://github.com/hugheylab/simphony.","code":"@Manual{,   title = {simphony: Simulating Large-Scale, Rhythmic Data},   author = {Jake Hughey and Jordan Singer},   year = {2022},   note = {https://simphony.hugheylab.org, https://github.com/hugheylab/simphony}, }"},{"path":"https://simphony.hugheylab.org/index.html","id":"simphony","dir":"","previous_headings":"","what":"Simulating Large-Scale, Rhythmic Data","title":"Simulating Large-Scale, Rhythmic Data","text":"simphony simulates large-scale, rhythmic data, including transcriptome data behavioral activity data. technical details designed validated simphony, check paper accompanying results.","code":""},{"path":[]},{"path":"https://simphony.hugheylab.org/index.html","id":"option-1-cran","dir":"","previous_headings":"Installation","what":"Option 1: CRAN","title":"Simulating Large-Scale, Rhythmic Data","text":"","code":"install.packages('simphony')"},{"path":"https://simphony.hugheylab.org/index.html","id":"option-2-hughey-lab-drat-repository","dir":"","previous_headings":"Installation","what":"Option 2: Hughey Lab Drat Repository","title":"Simulating Large-Scale, Rhythmic Data","text":"Install BiocManager. use RStudio, go Tools → Global Options… → Packages → Add… (Secondary repositories), enter: Name: hugheylab Url: https://hugheylab.github.io/drat/ . can install update package entering: Alternatively, can install update package entering:","code":"if (!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager') BiocManager::install('simphony') BiocManager::install('simphony', site_repository = 'https://hugheylab.github.io/drat/')"},{"path":"https://simphony.hugheylab.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulating Large-Scale, Rhythmic Data","text":"introduction package, read introductory vignette. explore simphony’s capabilities, check example vignette. details, check reference documentation.","code":""},{"path":"https://simphony.hugheylab.org/reference/defaultDispFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Default function for mapping expected counts to dispersion. — defaultDispFunc","title":"Default function for mapping expected counts to dispersion. — defaultDispFunc","text":"function estimated circadian RNA-seq data mouse liver (PRJNA297287), using local regression DESeq2. negative binomial distribution, \\(variance = mean + mean^2 * dispersion\\).","code":""},{"path":"https://simphony.hugheylab.org/reference/defaultDispFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default function for mapping expected counts to dispersion. — defaultDispFunc","text":"","code":"defaultDispFunc(x)"},{"path":"https://simphony.hugheylab.org/reference/defaultDispFunc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default function for mapping expected counts to dispersion. — defaultDispFunc","text":"object class function length 1.","code":""},{"path":"https://simphony.hugheylab.org/reference/defaultDispFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default function for mapping expected counts to dispersion. — defaultDispFunc","text":"x Numeric vector mean counts.","code":""},{"path":"https://simphony.hugheylab.org/reference/defaultDispFunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default function for mapping expected counts to dispersion. — defaultDispFunc","text":"Numeric vector dispersions.","code":""},{"path":[]},{"path":"https://simphony.hugheylab.org/reference/defaultDispFunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default function for mapping expected counts to dispersion. — defaultDispFunc","text":"","code":"means = 2^(6:10) dispersions = defaultDispFunc(means)"},{"path":"https://simphony.hugheylab.org/reference/getExpectedAbund.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate expected abundance — getExpectedAbund","title":"Calculate expected abundance — getExpectedAbund","text":"Calculate expected abundance multiple features multiple timepoints multiple conditions.","code":""},{"path":"https://simphony.hugheylab.org/reference/getExpectedAbund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate expected abundance — getExpectedAbund","text":"","code":"getExpectedAbund(   featureMetadata,   times = NULL,   sampleMetadata = NULL,   byCondGroup = is.null(times) )"},{"path":"https://simphony.hugheylab.org/reference/getExpectedAbund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate expected abundance — getExpectedAbund","text":"featureMetadata data.table columns feature, base, rhyFunc, amp, period, phase, every row corresponds gene. byCondGroup TRUE, must also columns cond group. times Numeric vector times calculate expected abundance row featureMetadata. sampleMetadata data.table columns sample, cond, time. Either times sampleMetadata must provided, former takes precedence. byCondGroup Logical whether speed calculation grouping columns cond group. Primarily internal use.","code":""},{"path":"https://simphony.hugheylab.org/reference/getExpectedAbund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate expected abundance — getExpectedAbund","text":"data.table derived featureMetadata (rows), additional columns time mu possibly others. sampling use negative binomial family, mu corresponds log2 counts.","code":""},{"path":[]},{"path":"https://simphony.hugheylab.org/reference/getExpectedAbund.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate expected abundance — getExpectedAbund","text":"","code":"library('data.table') featureMetadata = data.table(feature = c('feature_1', 'feature_2'),                              base = function(x) 0,                              amp = c(function(x) 0, function(x) 1),                              period = 24,                              phase = 0, rhyFunc = sin) abundDt = getExpectedAbund(featureMetadata, times = 6:17)"},{"path":"https://simphony.hugheylab.org/reference/getSampledAbund.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample abundance values — getSampledAbund","title":"Sample abundance values — getSampledAbund","text":"Sample feature abundance values given distributions. function used internally simphony(), usually need called directly.","code":""},{"path":"https://simphony.hugheylab.org/reference/getSampledAbund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample abundance values — getSampledAbund","text":"","code":"getSampledAbund(   abundDt,   logOdds = FALSE,   family = c(\"gaussian\", \"negbinom\", \"bernoulli\", \"poisson\"),   inplace = FALSE )"},{"path":"https://simphony.hugheylab.org/reference/getSampledAbund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample abundance values — getSampledAbund","text":"abundDt data.table expected abundance. family 'gaussian', required columns feature, sample, mu, sd. family 'negbinom', required columns feature, sample, mu, dispFunc, cond, group. family 'bernoulli' 'poisson', required columns feature, sample, mu. logOdds Logical whether mu corresponds log-odds. used family 'bernoulli'. family Character string family distributions sample abundance values. simphony give warning tries sample distribution outside region distribution defined: \\(\\mu < 0\\) negative binomial Poisson, \\(\\mu < 0\\) \\(\\mu > 1\\) Bernoulli. inplace Logical whether modify abundDt -place, adding column abund containing abundance values.","code":""},{"path":"https://simphony.hugheylab.org/reference/getSampledAbund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample abundance values — getSampledAbund","text":"Matrix abundance values, rows correspond features columns correspond samples.","code":""},{"path":[]},{"path":"https://simphony.hugheylab.org/reference/getSampledAbund.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample abundance values — getSampledAbund","text":"","code":"library('data.table') set.seed(6022) abundDt = data.table(feature = 'feature_1', sample = c('sample_1', 'sample_2'),                     mu = c(0, 5), sd = 1) abundMat = getSampledAbund(abundDt)"},{"path":"https://simphony.hugheylab.org/reference/mergeSimData.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge abundance data, feature metadata, and sample metadata — mergeSimData","title":"Merge abundance data, feature metadata, and sample metadata — mergeSimData","text":"Merge simulation's abundance data, feature metadata, sample metadata one data.table. function useful making plots using ggplot2.","code":""},{"path":"https://simphony.hugheylab.org/reference/mergeSimData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge abundance data, feature metadata, and sample metadata — mergeSimData","text":"","code":"mergeSimData(simData, features = NULL)"},{"path":"https://simphony.hugheylab.org/reference/mergeSimData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge abundance data, feature metadata, and sample metadata — mergeSimData","text":"simData List following elements, returned simphony(): abundData Matrix abundance values, rownames features colnames samples. sampleMetadata data.table columns sample cond. featureMetadata data.table columns feature cond. features Character vector features get abundance data. NULL, features.","code":""},{"path":"https://simphony.hugheylab.org/reference/mergeSimData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge abundance data, feature metadata, and sample metadata — mergeSimData","text":"data.table.","code":""},{"path":[]},{"path":"https://simphony.hugheylab.org/reference/mergeSimData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge abundance data, feature metadata, and sample metadata — mergeSimData","text":"","code":"library('data.table') featureGroups = data.table(amp = c(0, 1)) simData = simphony(featureGroups) mergedSimData = mergeSimData(simData, simData$featureMetadata$feature[1:2])"},{"path":"https://simphony.hugheylab.org/reference/simphony.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate feature abundance data — simphony","title":"Simulate feature abundance data — simphony","text":"Simulate experiments abundances rhythmic non-rhythmic features measured multiple timepoints one conditions.","code":""},{"path":"https://simphony.hugheylab.org/reference/simphony.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate feature abundance data — simphony","text":"","code":"simphony(   featureGroupsList,   fracFeatures = NULL,   nFeatures = 10,   timepointsType = c(\"auto\", \"specified\", \"random\"),   timeRange = c(0, 48),   interval = 2,   nReps = 1,   timepoints = NULL,   nSamplesPerCond = NULL,   rhyFunc = sin,   dispFunc = NULL,   logOdds = FALSE,   family = c(\"gaussian\", \"negbinom\", \"bernoulli\", \"poisson\") )"},{"path":"https://simphony.hugheylab.org/reference/simphony.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate feature abundance data — simphony","text":"featureGroupsList data.frame data.table (single condition) list data.frames data.tables (multiple conditions), row corresponds group features simulate. following columns optional: fracFeatures Fraction simulated features allocate group. Defaults 1/(number groups). rhyFunc Function generate rhythmic abundance. Must period \\(2\\pi\\). Defaults sin. amp Amplitude rhythm. Defaults 0. Corresponds multiplicative term front rhyFunc. Can numeric (constant time) function (time-dependent). See vignette examples. period Period rhythm. Defaults 24. phase Phase rhythm, units period. Defaults 0. Corresponds additive term rhyFunc. base Baseline abundance, .e., abundance rhyFunc term 0. Depending family, defaults 0 ('gaussian'), 8 ('negbinom', mean log2 counts), 0 ('bernoulli' logOdds TRUE), 0.5 ('bernoulli' logOdds FALSE), 1 ('poisson'). Can numeric (constant time) function (time-dependent). See vignette examples. sd Standard deviation sampled abundance values. Defaults 1. used family 'gaussian'. dispFunc Function calculate dispersion sampled abundance values, given expected abundance counts. used family 'negbinom'. fracFeatures Fraction simulated features allocate group. Defaults 1/(number groups). used first featureGroupsList data.frame lacks fracFeatures column. nFeatures Integer total number features simulate. timepointsType Character string set timepoints simulation. Must 'auto' (default), 'specified', 'random'. timeRange Numeric vector range timepoints use simulation. Defaults c(0, 48). used timepointsType 'auto' 'random'. interval Number amount time consecutive timepoints, units period. first timepoint 0. used timepointsType 'auto'. nReps Integer number replicates per timepoint. used timepointsType 'auto'. timepoints Numeric vector exact timepoints simulate, including replicates. used timepointsType 'specified'. nSamplesPerCond Integer number samples per condition, randomly uniformly spaced 0 period different condition. used timepointsType 'random'. rhyFunc Function generate rhythmic abundance. Must period \\(2\\pi\\). Defaults sin. used data.frame featureGroupsList lacks rhyFunc column. dispFunc Function calculate dispersion sampled abundance values, given expected abundance counts. Defaults defaultDispFunc. used family 'negbinom' data.frame featureGroupsList lacks dispFunc column. logOdds Logical whether rhythmic function corresponds log-odds. used family 'bernoulli'. family Character string family distributions sample abundance values. simphony give warning tries sample distribution outside region distribution defined: \\(\\mu < 0\\) negative binomial Poisson, \\(\\mu < 0\\) \\(\\mu > 1\\) Bernoulli.","code":""},{"path":"https://simphony.hugheylab.org/reference/simphony.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate feature abundance data — simphony","text":"List following elements: abundData Matrix abundance values (counts, family 'negbinom'), features rownames samples colnames. sampleMetadata data.table one row per sample. featureMetadata data.table one row per feature per condition. Columns amp base functions time. Columns amp0 base0 numeric correspond amplitude baseline abundance time 0, respectively. experMetadata List arguments passed simphony.","code":""},{"path":[]},{"path":"https://simphony.hugheylab.org/reference/simphony.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate feature abundance data — simphony","text":"","code":"library('data.table')  # Simulate data for features having one of three sets of rhythmic parameters. featureGroups = data.table(amp = c(0, 1, 1), phase = c(0, 0, 6),                            rhyFunc = c(cos, cos, sin)) simData = simphony(featureGroups)  # Simulate data for an experiment with specified timepoints and replicates. featureGroups = data.table(amp = c(0, 1)) simData = simphony(featureGroups, timepointsType = 'specified',                    timepoints = c(0, 2, 2, 4, 12, 16, 21))  # Simulate data for an experiment with random timepoints between 0 and 24. featureGroups = data.table(amp = c(0, 2)) simData = simphony(featureGroups, timepointsType = 'random',                    timeRange = c(0, 24), nSamplesPerCond = 20)  # Simulate data with time-dependent rhythm amplitude or baseline abundance featureGroups = data.table(amp = c(function(x) 1, function(x) 2^(-x / 24)),                            base = c(function(x) x / 12, function(x) 0)) simData = simphony(featureGroups)  # Simulate data for features whose rhythmicity varies between two conditions. featureGroupsList = list(   data.table(amp = c(1, 2, 2), phase = c(0, -3, 0), period = c(24, 24, 22)),   data.table(amp = c(3, 2, 2), phase = c(0, 3, 0), period = c(24, 24, 26))) simData = simphony(featureGroupsList)  # Simulate data from a negative binomial distribution with a higher variance. featureGroups = data.table(amp = 1, base = 6:8) dispFunc = function(x) 3 * defaultDispFunc(x) simData = simphony(featureGroups, family = 'negbinom', dispFunc = dispFunc)  # Simulate data at high temporal resolution from a Poisson distribution that # alternates between two states. featureGroups = data.table(amp = 1, base = 0,                            rhyFunc = function(x) ifelse(x %% (2 * pi) < pi, 0.5, 4))  simData = simphony(featureGroups, timeRange = c(0, 24 * 4), interval = 0.1,                    nReps = 1, family = 'poisson')  # Simulate data for 100 features, half non-rhythmic and half rhythmic, with # amplitudes for rhythmic features sampled from a log-normal distribution. nFeatures = 100 rhyFrac = 0.5 nRhyFeatures = round(rhyFrac * nFeatures) rhyAmps = exp(rnorm(nRhyFeatures, mean = 0, sd = 0.25)) fracFeatures = c(1 - rhyFrac, rep(rhyFrac / nRhyFeatures, nRhyFeatures)) featureGroups = data.table(amp = c(0, rhyAmps), fracFeatures = fracFeatures) simData = simphony(featureGroups, nFeatures = nFeatures)  # Simulate data for 100 rhythmic features, with baseline log2 expected counts # and residual log dispersion sampled from distributions whose parameters # were estimated, using DESeq2 and fitdistrplus, from circadian RNA-seq data # from mouse liver (PRJNA297287). nFeatures = 100 baseLog2Counts = rnorm(nFeatures, mean = 8.63, sd = 2.73) dispFactors = exp(rnorm(nFeatures, sd = 0.819)) dispFuncs = sapply(dispFactors, function(z) {function(x) defaultDispFunc(x) * z}) featureGroups = data.table(base = baseLog2Counts, dispFunc = dispFuncs, amp = 1) simData = simphony(featureGroups, nFeatures = nFeatures, family = 'negbinom')"},{"path":"https://simphony.hugheylab.org/reference/splitDiffFeatureGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Split differential featureGroups — splitDiffFeatureGroups","title":"Split differential featureGroups — splitDiffFeatureGroups","text":"Split diffFeatureGroups data.frame list two featureGroups data.frames, can passed simphony().","code":""},{"path":"https://simphony.hugheylab.org/reference/splitDiffFeatureGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split differential featureGroups — splitDiffFeatureGroups","text":"","code":"splitDiffFeatureGroups(diffFeatureGroups, checkValid = TRUE)"},{"path":"https://simphony.hugheylab.org/reference/splitDiffFeatureGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split differential featureGroups — splitDiffFeatureGroups","text":"diffFeatureGroups data.frame optional columns meanBase, dBase, meanSd, dSd, meanAmp, dAmp, meanPhase, dPhase describing changes abundance two conditions. row corresponds group features. checkValid Logical whether return rows amplitudes greater equal zero standard deviations greater zero.","code":""},{"path":"https://simphony.hugheylab.org/reference/splitDiffFeatureGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split differential featureGroups — splitDiffFeatureGroups","text":"List two data.tables possible columns base, sd, amp, phase, depending columns diffFeatureGroups.","code":""},{"path":[]},{"path":"https://simphony.hugheylab.org/reference/splitDiffFeatureGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split differential featureGroups — splitDiffFeatureGroups","text":"","code":"dGroups = data.frame(meanAmp = c(1, 1, 1, 1), dAmp = c(1, 1, 2, 2),                      meanPhase = c(0, 0, 0, 0), dPhase = c(0, 3, 0, 3)) featureGroups = splitDiffFeatureGroups(dGroups)"},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-103","dir":"Changelog","previous_headings":"","what":"simphony 1.0.3","title":"simphony 1.0.3","text":"Tweaked syntax linter.","code":""},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-102","dir":"Changelog","previous_headings":"","what":"simphony 1.0.2","title":"simphony 1.0.2","text":"Simplified test negative binomial.","code":""},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-101","dir":"Changelog","previous_headings":"","what":"simphony 1.0.1","title":"simphony 1.0.1","text":"Updated match lab style standards.","code":""},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-100","dir":"Changelog","previous_headings":"","what":"simphony 1.0.0","title":"simphony 1.0.0","text":"CRAN release: 2022-02-09 Solidified current version official 1.0.0 release.","code":""},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-0110","dir":"Changelog","previous_headings":"","what":"simphony 0.1.10","title":"simphony 0.1.10","text":"Removed use get() data.table, deprecated.","code":""},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-019","dir":"Changelog","previous_headings":"","what":"simphony 0.1.9","title":"simphony 0.1.9","text":"Revised code need globalVariables() order pass R CMD check.","code":""},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-018","dir":"Changelog","previous_headings":"","what":"simphony 0.1.8","title":"simphony 0.1.8","text":"Switched using data.table::set places speed.","code":""},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-017","dir":"Changelog","previous_headings":"","what":"simphony 0.1.7","title":"simphony 0.1.7","text":"Changed whitespace.","code":""},{"path":"https://simphony.hugheylab.org/news/index.html","id":"simphony-016","dir":"Changelog","previous_headings":"","what":"simphony 0.1.6","title":"simphony 0.1.6","text":"Added pkgdown site. Updated documentation.","code":""}]
